{
    "proxy": {
        "version": 1.2,
        "cloudflare": false,
        "maxLogLength": 10,
        "adminsecret": "8rh32RJxAKgjLTzN0KHtHydn1",
        "secrets": {
            "captcha": "z1JMTgDaT7njETfx71ea",
            "cookie": "fpF5LjEaJ6P9DZrPFmEh",
            "javascript": "SQu4hdPxTfBfeVg9qhIh"
        },
        "timeout": {
            "idle": 10,
            "read": 30,
            "write": 30,
            "read_header": 10
        },
        "ratelimits": {
            "challengeFailures": 40,
            "noRequestsSent": 10,
            "requests": 1000,
            "unknownFingerprint": 150
        },
        "maxHeaderSize": 3000000,
        "maxBodySize": 20000000
    },
    "domains": [
        {
            "name": "baloo.one",
            "backend": "1.1.1.1",
            "scheme": "http",
            "certificate": "assets/server/server.crt",
            "key": "assets/server/server.key",
            "webhook": {
                "url": "https://discord.com/api/webhooks/1055573557880569886/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
                "name": "balooProxy",
                "avatar": "https://avatars.githubusercontent.com/u/73783549",
                "attack_start_msg": "A DDoS attack has been detected against your domain `{{domain.name}}`",
                "attack_stop_msg": "The DDoS attack against your domain `{{domain.name}}` has stopped"
            },
            "firewallRules": [
                {
                    "expression": "(http.path eq \"/captcha\")",
                    "action": "3"
                },
                {
                    "expression": "(http.path eq \"/js\")",
                    "action": "2"
                },
                {
                    "expression": "(ip.engine eq \"\" or ((ip.engine eq \"Firefox\" and http.user_agent contains \"chrome\") or (ip.engine eq \"Chromium\" and http.user_agent contains \"firefox\")))",
                    "action": "+1"
                },
                {
                    "expression": "(http.method ne \"GET\" and http.method ne \"POST\")",
                    "action": "+2"
                }
            ],
            "cacheRules": [
                {
                    "expression": "(http.query eq \"cache=false\")",
                    "action": "BYPASS"
                },
                {
                    "expression": "(http.path eq \"/fullcache\")",
                    "action": "DEFAULT_STRICT"
                },
                {
                    "expression": "(http.path eq \"/my-ip\")",
                    "action": "CLIENTIP"
                }
            ],
            "bypassStage1": 75,
            "bypassStage2": 250,
            "disableBypassStage3": 100,
            "disableRawStage3": 250,
            "disableBypassStage2": 50,
            "disableRawStage2": 75
        }
    ]
}
